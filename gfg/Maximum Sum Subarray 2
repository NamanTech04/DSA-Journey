class Solution {
    public int maxSubarrSum(int[] arr, int a, int b) {
        // code here
        int n = arr.length;

        // compute prefix sum of the array
        for (int i = 1; i < n; i++) {
            arr[i] += arr[i - 1];
        }

        // to store the maximum sum found
        int maxi = arr[a - 1];

        // map to track prefix sum frequencies
        TreeMap<Integer, Integer> mp = new TreeMap<>();

        mp.put(0, 1);

        for (int i = a; i < n; i++) {

            // remove prefix[i - b - 1] from map if it's outside 
            // the valid window
            if (i > b) {
                int oldVal = arr[i - b - 1];
                mp.put(oldVal, mp.get(oldVal) - 1);
                if (mp.get(oldVal) == 0)
                    mp.remove(oldVal);
            } else if (i == b) {
                mp.put(0, mp.get(0) - 1);
                if (mp.get(0) == 0)
                    mp.remove(0);
            }

            // insert prefix[i - a] into map
            int newVal = arr[i - a];
            mp.put(newVal, mp.getOrDefault(newVal, 0) + 1);

            // subtract minimum prefix from current 
            // to get valid sum
            maxi = Math.max(maxi, arr[i] - mp.firstKey());
        }

        return maxi;
    }
}